{"entries":[{"timestamp":1741895900037,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"let x = 0\nlet y = 0\n\n// Representação do labirinto: 1 = parede, 0 = caminho\nlet labirinto = [\n    [0, 1, 1, 1, 1],\n    [0, 0, 1, 1, 1],\n    [1, 0, 1, 1, 1],\n    [1, 0, 0, 0, 0],\n    [1, 1, 1, 1, 0]\n]\n\nfunction desenharLabirinto() {\n    for (let i = 0; i < 5; i++) {\n        for (let j = 0; j < 5; j++) {\n            if (labirinto[j][i] === 1) {\n                led.plotBrightness(i, j, 100) // Parede\n            }\n        }\n    }\n}\n\nfunction atualizarBolinha() {\n    led.plotBrightness(x, y, 255) // Bolinha com brilho máximo\n}\n\n// Evento principal\nbasic.forever(function () {\n    desenharLabirinto()\n    atualizarBolinha()\n    basic.pause(200)\n    basic.clearScreen()\n    desenharLabirinto()\n\n    // Movimenta a bolinha com base na inclinação\n    if (input.acceleration(Dimension.X) > 200 && x < 4 && labirinto[y][x + 1] === 0) {\n        x++\n    } else if (input.acceleration(Dimension.X) < -200 && x > 0 && labirinto[y][x - 1] === 0) {\n        x--\n    } else if (input.acceleration(Dimension.Y) > 200 && y < 4 && labirinto[y + 1][x] === 0) {\n        y++\n    } else if (input.acceleration(Dimension.Y) < -200 && y > 0 && labirinto[y - 1][x] === 0) {\n        y--\n    }\n\n    // Verifica se chegou ao final\n    if (x === 4 && y === 4) {\n        basic.showString(\"Venceu!\")\n        control.reset() // Reinicia o jogo\n    }\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":1324,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"\": \""],[-1,"labirinto Objetivo: O jogador deve guiar a \\\"bolinha\\\" (que brilha mais forte na matriz de LEDs) do ponto inicial (canto superior esquerdo, posição 0,0) até o ponto de chegada (canto inferior direito, posição 4,4), sem colidir com as paredes do labirinto.  Controles:  O Micro:bit usa o acelerômetro para detectar a inclinação.  Incline o Micro:bit para cima, para baixo, para a esquerda ou para a direita para mover a bolinha.  A bolinha se movimenta apenas para posições onde não há paredes.  Labirinto:  O labirinto está desenhado na matriz de LEDs 5x5.  As paredes têm brilho médio e a bolinha tem o brilho mais forte, destacando-se no jogo.  Condições de Vitória:  O jogador vence quando a bolinha chega à posição (4,4). Quando isso acontece, o Micro:bit exibe a mensagem \\\"Venceu!\\\" no visor de LEDs e o jogo reinicia.  Desafios:  É necessário inclinar o Micro:bit com precisão para guiar a bolinha pelas passagens sem bater nas paredes."],[1,"jogo"],[0,"\",\n "]],"start1":11,"start2":11,"length1":951,"length2":12},{"diffs":[[0,".md\""],[-1,",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":215,"start2":215,"length1":64,"length2":44}]},{"type":"added","filename":"main.py","value":"def on_forever():\n    pass\nbasic.forever(on_forever)\n"}]},{"timestamp":1741896069530,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"birinto "],[1,"Objetivo: O jogador deve guiar a \\\"bolinha\\\" (que brilha mais forte na matriz de LEDs) do ponto inicial (canto superior esquerdo, posição 0,0) até o ponto de chegada (canto inferior direito, posição 4,4), sem colidir com as paredes do labirinto.  Controles:  O Micro:bit usa o acelerômetro para detectar a inclinação.  Incline o Micro:bit para cima, para baixo, para a esquerda ou para a direita para mover a bolinha.  A bolinha se movimenta apenas para posições onde não há paredes.  Labirinto:  O labirinto está desenhado na matriz de LEDs 5x5.  As paredes têm brilho médio e a bolinha tem o brilho mais forte, destacando-se no jogo.  Condições de Vitória:  O jogador vence quando a bolinha chega à posição (4,4). Quando isso acontece, o Micro:bit exibe a mensagem \\\"Venceu!\\\" no visor de LEDs e o jogo reinicia.  Desafios:  É necessário inclinar o Micro:bit com precisão para guiar a bolinha pelas passagens sem bater nas paredes."],[0,"\",\n    \""]],"start1":17,"start2":17,"length1":16,"length2":949}]}]},{"timestamp":1742480090142,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"nto "],[-1,"jogo"],[0,"\",\n "]],"start1":21,"start2":21,"length1":12,"length2":8}]}]},{"timestamp":1742480092934,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"art\""],[-1," id=\"f_WXVdpA(KGTFG`j*{iZ\""],[0," x=\""]],"start1":100,"start2":100,"length1":34,"length2":8},{"diffs":[[0,"ver\""],[-1," id=\"AobuBo:WdI{0iQg;t+*9\""],[0," x=\""]],"start1":151,"start2":151,"length1":34,"length2":8}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":252,"start2":252,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// testes vão aqui; isto não será compilado quando este pacote for usado como uma extensão.\n"}]}],"snapshots":[{"timestamp":1741895900036,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"jogo\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1742480090142,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"let x = 0\nlet y = 0\n\n// Representação do labirinto: 1 = parede, 0 = caminho\nlet labirinto = [\n    [0, 1, 1, 1, 1],\n    [0, 0, 1, 1, 1],\n    [1, 0, 1, 1, 1],\n    [1, 0, 0, 0, 0],\n    [1, 1, 1, 1, 0]\n]\n\nfunction desenharLabirinto() {\n    for (let i = 0; i < 5; i++) {\n        for (let j = 0; j < 5; j++) {\n            if (labirinto[j][i] === 1) {\n                led.plotBrightness(i, j, 100) // Parede\n            }\n        }\n    }\n}\n\nfunction atualizarBolinha() {\n    led.plotBrightness(x, y, 255) // Bolinha com brilho máximo\n}\n\n// Evento principal\nbasic.forever(function () {\n    desenharLabirinto()\n    atualizarBolinha()\n    basic.pause(200)\n    basic.clearScreen()\n    desenharLabirinto()\n\n    // Movimenta a bolinha com base na inclinação\n    if (input.acceleration(Dimension.X) > 200 && x < 4 && labirinto[y][x + 1] === 0) {\n        x++\n    } else if (input.acceleration(Dimension.X) < -200 && x > 0 && labirinto[y][x - 1] === 0) {\n        x--\n    } else if (input.acceleration(Dimension.Y) > 200 && y < 4 && labirinto[y + 1][x] === 0) {\n        y++\n    } else if (input.acceleration(Dimension.Y) < -200 && y > 0 && labirinto[y - 1][x] === 0) {\n        y--\n    }\n\n    // Verifica se chegou ao final\n    if (x === 4 && y === 4) {\n        basic.showString(\"Venceu!\")\n        control.reset() // Reinicia o jogo\n    }\n})\n","README.md":"","main.py":"def on_forever():\n    pass\nbasic.forever(on_forever)\n","pxt.json":"{\n    \"name\": \"labirinto Objetivo: O jogador deve guiar a \\\"bolinha\\\" (que brilha mais forte na matriz de LEDs) do ponto inicial (canto superior esquerdo, posição 0,0) até o ponto de chegada (canto inferior direito, posição 4,4), sem colidir com as paredes do labirinto.  Controles:  O Micro:bit usa o acelerômetro para detectar a inclinação.  Incline o Micro:bit para cima, para baixo, para a esquerda ou para a direita para mover a bolinha.  A bolinha se movimenta apenas para posições onde não há paredes.  Labirinto:  O labirinto está desenhado na matriz de LEDs 5x5.  As paredes têm brilho médio e a bolinha tem o brilho mais forte, destacando-se no jogo.  Condições de Vitória:  O jogador vence quando a bolinha chega à posição (4,4). Quando isso acontece, o Micro:bit exibe a mensagem \\\"Venceu!\\\" no visor de LEDs e o jogo reinicia.  Desafios:  É necessário inclinar o Micro:bit com precisão para guiar a bolinha pelas passagens sem bater nas paredes.\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1742480107289}